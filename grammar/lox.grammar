```
import { lazy, oneOf, oneOrMore, Parser, regExp, seqOf, str, zeroOrMore, zeroOrOne } from './parserLib'

const whitespace = regExp(/^\s/)
const singleLineComment = regExp(/^[/][/].*/)
const multiLineComment = regExp(/^[/][*].*[*][/]/s)
const comment = oneOf(singleLineComment, multiLineComment)
export const ignored = zeroOrMore(oneOf(whitespace, comment))

const token = (s: string) =>
  seqOf(ignored, str(s))
    .map(([_, res]) => res)

const regexToken = (pattern: RegExp) =>
  seqOf(ignored, regExp(pattern))
    .map(([_, res]) => res)
```

program        -> declaration* ;

declaration    -> classDecl
               | funDecl
               | varDecl
               | statement ;

classDecl      -> "class" IDENTIFIER ( "<" IDENTIFIER )?
                 "{" func* "}" ;

funDecl        -> "fun" func ;

varDecl        -> "var" IDENTIFIER ( "=" expression )? ";" ;

statement      -> exprStmt
               | forStmt
               | ifStmt
               | printStmt
               | returnStmt
               | whileStmt
               | block ;

exprStmt       -> expression ";" ;

forStmt        -> "for" "(" ( varDecl | exprStmt | ";" )
                           expression? ";"
                           expression? ")" statement ;

ifStmt         -> "if" "(" expression ")" statement
                 ( "else" statement )? ;

printStmt      -> "print" expression ";" ;

returnStmt     -> "return" expression? ";" ;

whileStmt      -> "while" "(" expression ")" statement ;

block          -> "{" declaration* "}" ;

expression     -> assignment ;

assignment     -> ( call "." )? IDENTIFIER "=" assignment
               | logic_or ;

logic_or       -> logic_and ( "or" logic_and )* ;

logic_and      -> equality ( "and" equality )* ;

equality       -> comparison ( ( "!=" | "==" ) comparison )* ;

comparison     -> term ( ( ">=" | ">" | "<=" | "<" ) term )* ;

term           -> factor ( ( "-" | "+" ) factor )* ;

factor         -> unary ( ( "/" | "*" ) unary )* ;

unary          -> ( "!" | "-" ) unary | call ;

call           -> primary ( "(" args? ")" | "." IDENTIFIER )* ;

primary        -> "true" | "false" | "nil" | "this"
               | NUMBER | STRING | IDENTIFIER | "(" expression ")"
               | "super" "." IDENTIFIER ;

func           -> IDENTIFIER "(" parameters? ")" block ;

parameters     -> IDENTIFIER ( "," IDENTIFIER )* ;

args           -> expression ( "," expression )* ;

NUMBER         : /^[0-9]+(\.[0-9]+)?/ ;

STRING         : /^"[^"]*"/ ;

IDENTIFIER     : /^[a-zA-Z_][a-zA-Z_0-9]*/ ;
